{
  "openapi": "3.0.0",
  "info": {
    "title": "Platform for Remote Control of a Barrier Access Control System",
    "description": "This is a specification for this barrier access control system.",
    "version": "0.1.0"
  },
  "externalDocs": {
    "description": "Database diagram",
    "url": "https://dbdiagram.io/d/Diploma-DB-673e9c25e9daa85aca2ed394"
  },
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Authorization-Users"
        ],
        "summary": "Register a new user.",
        "description": "Allows a user to register by providing their name, phone number, and password. The phone number must be in the Russian format. Password must be strong - min 6 characters, must contain at least one lowercase letter, one uppercase letter, and one digit.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "full_name": {
                    "type": "string",
                    "example": "Ivan Ivanov"
                  },
                  "phone": {
                    "type": "string",
                    "pattern": "^7[\\d\\s\\+\\-]*[\\d]{10}$",
                    "example": "+7 942 421 42 42",
                    "description": "Phone number must be in Russian format, starting with '7' and followed by 10 digits."
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{6,}$",
                    "example": "SecurePassword1",
                    "description": "Password must contain at least one lowercase letter, one uppercase letter, and one digit, with a minimum length of 6 characters."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "64b1c7e8-4e12-47c5-9dfd-7a6b7699c582"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid data provided. Ensure the phone number is in the correct format and the password meets security requirements."
          },
          "409": {
            "description": "A user with this phone number already exists."
          },
          "500": {
            "description": "Internal server error. Please try again later."
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authorization-General"
        ],
        "summary": "User login.",
        "description": "Authenticates the user and returns an access token along with the user’s type (user/admin) and expiration time.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone": {
                    "type": "string",
                    "example": "+7 942 421 42 42"
                  },
                  "password": {
                    "type": "string",
                    "example": "SomePassword"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "example": "64b1c7e8-4e12-47c5-9dfd-7a6b7699c582"
                    },
                    "refresh_token": {
                      "type": "string",
                      "example": "d3a46c5a-bc3f-4e28-91b8-7cbf4799c832"
                    },
                    "expires_in": {
                      "type": "integer",
                      "example": 3600
                    },
                    "user_type": {
                      "type": "string",
                      "enum": [
                        "user",
                        "admin"
                      ],
                      "example": "admin"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid phone number or password."
          },
          "500": {
            "description": "Internal server error. Please try again later."
          }
        }
      }
    },
    "/auth/user": {
      "get": {
        "tags": [
          "Authorization-General"
        ],
        "summary": "Retrieve the authenticated user's profile.",
        "description": "Returns the profile information of the currently authenticated user, based on the provided Bearer token.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Please provide a valid authentication token."
          },
          "500": {
            "description": "Internal server error. Please try again later."
          }
        }
      }
    },
    "/auth/change-password": {
      "patch": {
        "tags": [
          "Authorization-General"
        ],
        "summary": "Change the user's password.",
        "description": "Allows the authenticated user to change their password by providing the current password and a new secure one.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "current_password": {
                    "type": "string",
                    "example": "old_password"
                  },
                  "new_password": {
                    "type": "string",
                    "example": "new_secure_password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully."
          },
          "400": {
            "description": "Invalid current password or new password does not meet security standards."
          },
          "401": {
            "description": "Unauthorized. User is not authenticated."
          },
          "500": {
            "description": "Internal server error. Please try again later."
          }
        }
      }
    },
    "/auth/change-phone": {
      "patch": {
        "tags": [
          "Authorization-General"
        ],
        "summary": "Change the user's phone number.",
        "description": "Allows the authenticated user to update their phone number after verifying their current password. The phone number must be a valid phone number in Russia.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_phone": {
                    "type": "string",
                    "example": "+7 942 421 42 42"
                  },
                  "password": {
                    "type": "string",
                    "example": "current_password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone number changed successfully."
          },
          "400": {
            "description": "Invalid phone number format."
          },
          "401": {
            "description": "Unauthorized. User is not authenticated."
          },
          "409": {
            "description": "A user with this phone number already exists."
          },
          "500": {
            "description": "Internal server error. Please try again later."
          }
        }
      }
    },
    "/barriers": {
      "get": {
        "tags": [
          "Barriers-General"
        ],
        "summary": "Get a list of all barriers.",
        "description": "Returns a list of barriers with optional search by address and pagination.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "street_address",
            "in": "query",
            "description": "Search for barriers by part of the street address (substring match).",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Красная площадь"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude of the geographic location to search nearby barriers.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "float",
              "example": 55.7558
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Longitude of the geographic location to search nearby barriers.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "float",
              "example": 37.6176
            }
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Radius (in meters) for proximity search when using latitude and longitude.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "example": 5000
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of barriers with pagination and optional address search.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "integer",
                      "example": 100
                    },
                    "current_page": {
                      "type": "integer",
                      "example": 1
                    },
                    "page_size": {
                      "type": "integer",
                      "example": 10
                    },
                    "barriers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Barrier"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters."
          }
        }
      },
      "post": {
        "tags": [
          "Barriers-Admins"
        ],
        "summary": "Create a new barrier.",
        "description": "Allows an admin to create a new barrier with all required and optional settings.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "The address of the barrier for map display.",
                    "example": "Main St, Apt 101, Moscow"
                  },
                  "device_phone_number": {
                    "type": "string",
                    "description": "The phone number used to control the barrier.",
                    "example": "+7 942 421 42 42"
                  },
                  "device_model": {
                    "type": "string",
                    "enum": [
                      "rtu5024",
                      "rtu5025"
                    ],
                    "description": "The type of the device controlling the barrier.",
                    "example": "rtu5025"
                  },
                  "contact_phone": {
                    "type": "string",
                    "description": "Contact phone number for user inquiries.",
                    "example": "+7 942 421 42 42"
                  },
                  "metadata": {
                    "type": "string",
                    "description": "Some description about device.",
                    "example": "You need to call me before opening."
                  },
                  "limits": {
                    "type": "array",
                    "description": "List of limits for the barrier.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "limit_type": {
                          "type": "string",
                          "enum": [
                            "phone",
                            "temporary",
                            "sms"
                          ],
                          "description": "The type of limit.",
                          "example": "phone"
                        },
                        "limit_value": {
                          "type": "integer",
                          "description": "The value for this limit.",
                          "example": 10
                        }
                      }
                    }
                  },
                  "is_public": {
                    "type": "boolean",
                    "description": "Whether the barrier is visible to all users.",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Barrier created successfully."
          },
          "400": {
            "description": "Invalid data provided."
          },
          "401": {
            "description": "Unauthorized. Admin access required."
          }
        }
      }
    },
    "/barriers/my": {
      "get": {
        "tags": [
          "Barriers-General"
        ],
        "summary": "Get a list of my barriers.",
        "description": "Returns a list of barriers with optional pagination.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of barriers with pagination.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "integer",
                      "example": 100
                    },
                    "current_page": {
                      "type": "integer",
                      "example": 1
                    },
                    "page_size": {
                      "type": "integer",
                      "example": 10
                    },
                    "barriers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Barrier"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters."
          }
        }
      }
    },
    "/barriers/{barrier_id}": {
      "get": {
        "tags": [
          "Barriers-General"
        ],
        "summary": "Get detailed information about a barrier.",
        "description": "Retrieves detailed information about a barrier by its unique ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "barrier_id",
            "in": "path",
            "description": "The unique ID of the barrier.",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details about the barrier.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Barrier"
                }
              }
            }
          },
          "400": {
            "description": "Invalid barrier ID."
          },
          "404": {
            "description": "Barrier not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Barriers-General"
        ],
        "summary": "Delete a barrier.",
        "description": "Allows admins to delete a barrier completely. Users can only remove the barrier from their list (leave the group).",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "barrier_id",
            "in": "path",
            "description": "The unique ID of the barrier.",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the barrier or removed it from the user's list."
          },
          "404": {
            "description": "Barrier not found."
          }
        }
      },
      "patch": {
        "tags": [
          "Barriers-Admins"
        ],
        "summary": "Edit an existing barrier.",
        "description": "Update specific details of a barrier by its ID.",
        "parameters": [
          {
            "name": "barrier_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the barrier to be updated."
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "example": "Updated St, Apt 202, Moscow"
                  },
                  "device_phone_number": {
                    "type": "string",
                    "description": "The phone number used to control the barrier.",
                    "example": "+7 942 421 42 42"
                  },
                  "device_model": {
                    "type": "string",
                    "enum": [
                      "rtu5024",
                      "rtu5025"
                    ],
                    "description": "The type of the device controlling the barrier.",
                    "example": "rtu5024"
                  },
                  "contact_phone": {
                    "type": "string",
                    "description": "Contact phone number for user inquiries.",
                    "example": "+7 942 421 42 42"
                  },
                  "metadata": {
                    "type": "string",
                    "description": "Some description about device.",
                    "example": "You need to call me before opening."
                  },
                  "limits": {
                    "type": "array",
                    "description": "List of limits for the barrier.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "limit_type": {
                          "type": "string",
                          "enum": [
                            "phone",
                            "temporary",
                            "sms"
                          ],
                          "description": "The type of limit.",
                          "example": "phone"
                        },
                        "limit_value": {
                          "type": "integer",
                          "description": "The value for this limit.",
                          "example": 10
                        }
                      }
                    }
                  },
                  "is_public": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Barrier successfully updated."
          },
          "400": {
            "description": "Invalid input."
          },
          "404": {
            "description": "Barrier not found."
          }
        }
      }
    },
    "/barriers/{barrier_id}/settings": {
      "patch": {
        "tags": [
          "Barriers-Admins"
        ],
        "summary": "Update specific settings for a barrier.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "barrier_id",
            "in": "path",
            "description": "ID of the barrier to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 42
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "setting_key": {
                    "type": "string",
                    "example": "opening_duration"
                  },
                  "setting_value": {
                    "type": "string",
                    "example": "15"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Barrier settings updated successfully."
          },
          "400": {
            "description": "Invalid input data."
          },
          "404": {
            "description": "Barrier or setting not found."
          }
        }
      }
    },
    "/barriers/{barrier_id}/users": {
      "get": {
        "tags": [
          "Barriers-Admins"
        ],
        "summary": "Get all users connected to a specific barrier.",
        "description": "Fetch all users who have access to a specific barrier, based on the barrier's ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "barrier_id",
            "in": "path",
            "description": "The unique ID of the barrier.",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 42
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users connected to the barrier.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "integer",
                      "example": 100
                    },
                    "current_page": {
                      "type": "integer",
                      "example": 1
                    },
                    "page_size": {
                      "type": "integer",
                      "example": 10
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Barrier not found."
          }
        }
      }
    },
    "/barriers/{barrier_id}/users/{user_id}": {
      "delete": {
        "tags": [
          "Barriers-Admins"
        ],
        "summary": "Remove a user’s access to a specific barrier.",
        "description": "Deletes the access of a user to a barrier, identified by the barrier's ID and user's ID. This action is restricted to the barrier’s admin.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "barrier_id",
            "in": "path",
            "description": "The unique ID of the barrier.",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 42
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "The unique ID of the user.",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the user from the barrier."
          },
          "403": {
            "description": "Forbidden. User does not have admin privileges for this barrier."
          },
          "404": {
            "description": "Barrier not found, or user not connected to the barrier."
          }
        }
      }
    },
    "/barriers/{barrier_id}/phones": {
      "get": {
        "tags": [
          "Barrier-Phones-General"
        ],
        "summary": "Get all additional phones connected to a specific barrier.",
        "description": "Retrieve all additional phone numbers connected to a barrier, including their type and schedule. If admin requested - then there will be phones for all users, if user requests then only phones of this user. Also can be paginated.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "barrier_id",
            "in": "path",
            "description": "The unique ID of the barrier.",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 42
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of additional phones connected to the barrier.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "integer",
                      "example": 100
                    },
                    "current_page": {
                      "type": "integer",
                      "example": 1
                    },
                    "page_size": {
                      "type": "integer",
                      "example": 10
                    },
                    "phones": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "phone_id": {
                            "type": "integer",
                            "example": 42
                          },
                          "user_id": {
                            "type": "integer",
                            "example": 42
                          },
                          "barrier_id": {
                            "type": "integer",
                            "example": 42
                          },
                          "phone": {
                            "type": "string",
                            "example": "+7 942 421 42 42"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "static",
                              "temporary",
                              "schedule"
                            ],
                            "example": "schedule"
                          },
                          "start_time": {
                            "type": "string",
                            "format": "date-time",
                            "example": null
                          },
                          "end_time": {
                            "type": "string",
                            "format": "date-time",
                            "example": null
                          },
                          "schedule": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "day_of_week": {
                                  "type": "integer",
                                  "example": 1
                                },
                                "start_time": {
                                  "type": "string",
                                  "example": "09:00"
                                },
                                "end_time": {
                                  "type": "string",
                                  "example": "18:00"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Barrier not found."
          }
        }
      },
      "post": {
        "tags": [
          "Barrier-Phones-General"
        ],
        "summary": "Add a new additional phone to a barrier.",
        "description": "Allows the user to add a regular, temporary, or scheduled phone number to a barrier. Admin also can do that, but it means that he adds phone for some other user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "barrier_id",
            "in": "path",
            "description": "ID of the barrier.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "example": 42
                  },
                  "phone": {
                    "type": "string",
                    "example": "+7 942 421 42 42"
                  },
                  "name": {
                    "type": "string",
                    "example": "Guest Number"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "static",
                      "temporary",
                      "schedule"
                    ],
                    "example": "schedule"
                  },
                  "start_time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-12-01T10:00:00"
                  },
                  "end_time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-12-01T18:00:00"
                  },
                  "schedule": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "day_of_week": {
                          "type": "integer",
                          "example": 1
                        },
                        "start_time": {
                          "type": "string",
                          "example": "09:00"
                        },
                        "end_time": {
                          "type": "string",
                          "example": "18:00"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone added successfully."
          },
          "400": {
            "description": "Invalid input data."
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/barriers/{barrier_id}/phones/{phone_id}": {
      "patch": {
        "tags": [
          "Barrier-Phones-General"
        ],
        "summary": "Edit an existing additional phone.",
        "description": "Allows the user to update the details of an existing phone number (e.g., change schedule or name).",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "barrier_id",
            "in": "path",
            "description": "ID of the barrier.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "phone_id",
            "in": "path",
            "description": "ID of the phone number to update.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone": {
                    "type": "string",
                    "example": "+7 942 421 42 42"
                  },
                  "name": {
                    "type": "string",
                    "example": "Updated Guest Number"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "static",
                      "temporary",
                      "schedule"
                    ],
                    "example": "schedule"
                  },
                  "schedule": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "day_of_week": {
                          "type": "integer",
                          "example": 2
                        },
                        "start_time": {
                          "type": "string",
                          "example": "10:00"
                        },
                        "end_time": {
                          "type": "string",
                          "example": "16:00"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone updated successfully."
          },
          "400": {
            "description": "Invalid input data."
          },
          "404": {
            "description": "Phone not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Barrier-Phones-General"
        ],
        "summary": "Delete an additional phone from a barrier.",
        "description": "Allows the user to delete an additional phone number associated with a barrier.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "barrier_id",
            "in": "path",
            "description": "ID of the barrier.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "phone_id",
            "in": "path",
            "description": "ID of the phone number.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone deleted successfully."
          },
          "404": {
            "description": "Phone not found."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 42
          },
          "phone": {
            "type": "string",
            "format": "phone",
            "example": "+7 942 421 42 42"
          },
          "full_name": {
            "type": "string",
            "example": "Ivanov Ivan"
          },
          "password": {
            "type": "string",
            "example": "encoded_password"
          },
          "is_admin": {
            "type": "boolean",
            "default": false
          },
          "is_active": {
            "type": "boolean",
            "default": true
          },
          "date_joined": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-07T10:00:00Z"
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-07T15:30:00Z"
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "Barrier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 42
          },
          "owner_id": {
            "type": "integer",
            "example": 42
          },
          "address_id": {
            "type": "integer",
            "example": 42
          },
          "device_phone_number": {
            "type": "string",
            "example": "+7 942 421 42 42"
          },
          "device_model_id": {
            "type": "integer",
            "example": 42
          },
          "metadata": {
            "type": "string",
            "example": "{\"key\": \"value\"}"
          },
          "is_public": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 42
          },
          "street_address": {
            "type": "string",
            "example": "Красная площадь, 1"
          },
          "city": {
            "type": "string",
            "example": "Москва"
          },
          "state": {
            "type": "string",
            "example": "Москва"
          },
          "postal_code": {
            "type": "string",
            "example": 109012
          },
          "country": {
            "type": "string",
            "example": "Россия"
          },
          "latitude": {
            "type": "number",
            "example": 55.7558
          },
          "longitude": {
            "type": "number",
            "example": 37.6176
          }
        }
      },
      "BarrierLimits": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 42
          },
          "barrier_id": {
            "type": "integer",
            "example": 42
          },
          "limit_type": {
            "type": "string",
            "enum": [
              "phone",
              "temporary",
              "sms"
            ],
            "example": "phone"
          },
          "limit_value": {
            "type": "integer",
            "example": 100
          }
        }
      },
      "DeviceModels": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 42
          },
          "model_name": {
            "type": "string",
            "example": "rtu5025"
          }
        }
      },
      "DeviceModelSettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 42
          },
          "device_model_id": {
            "type": "integer",
            "example": 42
          },
          "setting_key": {
            "type": "string",
            "example": "opening_duration"
          },
          "description": {
            "type": "string",
            "example": "This is some setting to set opening duration"
          }
        }
      },
      "AdditionalPhone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 42
          },
          "user_id": {
            "type": "integer",
            "example": 42
          },
          "barrier_id": {
            "type": "integer",
            "example": 42
          },
          "phone": {
            "type": "string",
            "example": "+7 942 421 42 42"
          },
          "name": {
            "type": "string",
            "example": "Guest: Ivanov Ivan"
          },
          "type": {
            "type": "string",
            "enum": [
              "static",
              "temporary",
              "schedule"
            ],
            "example": "temporary"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-12-01T10:00:00Z"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-12-02T10:00:00Z"
          }
        }
      },
      "PhoneSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 42
          },
          "phone_id": {
            "type": "integer",
            "example": 42
          },
          "day_of_week": {
            "type": "string",
            "enum": [
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday",
              "sunday"
            ],
            "example": "monday"
          },
          "start_time": {
            "type": "string",
            "format": "time",
            "example": "09:00:00"
          },
          "end_time": {
            "type": "string",
            "format": "time",
            "example": "18:00:00"
          }
        }
      },
      "EnterRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 42
          },
          "user_id": {
            "type": "integer",
            "example": 42
          },
          "barrier_id": {
            "type": "integer",
            "example": 42
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "is_accepted": {
            "type": "boolean",
            "nullable": true,
            "example": true
          },
          "request_type": {
            "type": "string",
            "enum": [
              "from_user",
              "from_barrier"
            ],
            "example": "from_user"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-01T10:00:00Z"
          }
        }
      },
      "ActionHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 42
          },
          "user_id": {
            "type": "integer",
            "example": 42
          },
          "action_type": {
            "type": "string",
            "enum": [
              "add_phone",
              "delete_phone",
              "set_time_restrictions"
            ],
            "example": "add_phone"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-01T10:00:00Z"
          }
        }
      },
      "SmsLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 42
          },
          "phone": {
            "type": "string",
            "example": "+7 942 421 42 42"
          },
          "message": {
            "type": "string",
            "example": "Command sent to open barrier"
          },
          "sent_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-01T10:00:00Z"
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}